blokkat_determine_distances = {
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 0 max_distance <= 50 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 50 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_m
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 50 max_distance <= 100 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 100 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_k
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 100 max_distance <= 150 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 150 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_g
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 150 max_distance <= 200 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 200 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_f
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 200 max_distance <= 250 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 250 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_a
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 250 max_distance <= 300 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 300 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_b
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 300 max_distance <= 350 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 350 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_neutron_star
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 350 max_distance <= 400 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 400 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_pulsar
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 400 max_distance <= 450 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 450 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_black_hole
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 450 max_distance <= 500 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 500 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_giga_o_star
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 500 max_distance <= 550 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 550 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_dyson_star
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 550 max_distance <= 600 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 600 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_ehof_black_hole
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 600 max_distance <= 650 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 650 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_m_giant
	}
	every_system = {
		limit = { 
			distance = { source = event_target:blokkat_capital_star type = euclidean min_distance >= 650 max_distance <= 99999 }
			NOT = { has_star_flag = blokkat_distance_measured } 
		}
		set_variable = { which = blokkat_capital_distance value = 700 }
		set_star_flag = blokkat_distance_measured
		#set_star_class = sc_habitat
	}
}

blokkat_harvest_system = {
	event_target:blokkat_country = {
		if = {
			limit = { NOT = { has_country_flag = blokkat_all_stripmining_fleets_go_home } }
			set_timed_country_flag = {
				flag = blokkat_all_stripmining_fleets_go_home
				days = 90
			}
		}
		if = {
			limit = { NOT = { has_country_flag = blokkat_stripminers_heading_home } }
			set_country_flag = blokkat_stripminers_heading_home
		}
	}
	if = {
		limit = {
			OR = {
				any_system_planet = { is_planet_class = pc_infested }
				any_system_planet = { is_planet_class = pc_ai }
			}
		}
		every_system_planet = {
			limit = {
				OR = { 
					has_planet_flag = machine_world_1
					has_planet_flag = machine_world_2
					has_planet_flag = machine_world_3
					has_planet_flag = machine_world_4
				}
			}
			planet_event = { id = giga_qso.111 }
		}
		every_system_planet = {
			limit = { has_planet_flag = machine_lair }
			planet_event = { id = giga_qso.113 }
		}
		every_system_planet = {
			limit = { is_planet_class = pc_infested }
			planet_event = { id = giga_qso.115 } # Infested world
		}
	}
	every_system_planet = {
		limit = { 
			is_colony = yes
			owner = { is_ai = no }
		}
		set_planet_flag = blokkat_dont_delete_yet
		planet_event = { id = giga_blokkat.1023 }
	}
	if = {
		limit = {
			NOT = { has_global_flag = blokkats_ate_first_system }
		}
		set_global_flag = blokkats_ate_first_system
		save_global_event_target_as = blokkat_first_stripmined_system
		every_country = {
			limit = {
				has_event_chain = "blokkat_chain"
			}
			country_event = { id = giga_blokkat.1020 days = 2 }
		}
	}
	every_country = {
		limit = {
			has_event_chain = "blokkat_chain"
		}
		add_event_chain_counter = {
			event_chain = "blokkat_chain"
			counter = "blokkat_systems_stripmined"
			amount = 1
		}
	}
	every_system_planet = {
		limit = {
			is_star = no
		}
		every_country = {
			limit = {
				has_event_chain = "blokkat_chain"
			}
			add_event_chain_counter = {
				event_chain = "blokkat_chain"
				counter = "blokkat_planets_stripmined"
				amount = 1
			}
		}
	}
	set_star_class = sc_blokkat_stripmined
	remove_star_flag = blokkat_system_being_stripmined
	set_star_flag = blokkat_stripmined_system
	if = {
		limit = { NOT = { has_star_flag = blokkat_system_name_set_to_void } }
		set_star_flag = blokkat_system_name_set_to_void
		set_name = {
			key = "NAME_Giga_Void_System"
			variable_string = "[PREV.GetName]"
		}
	}
	set_asteroid_belt = { radius = 0 }
	every_fleet_in_system = {
		limit = { has_fleet_flag = blokkat_stripmine_fleet }
		remove_fleet_flag = blokkat_charging_up
		ROOT = {
			create_ambient_object = {
				type = blokkat_star_collapse
				location = PREV
				entity_offset_height = -5
				effect = {
					set_ambient_object_flag = blokkat_star_collapse
				}
			}
		}
	}
	every_system_planet = {
		if = {
			limit = { has_planet_flag = megastructure }
			remove_planet_flag = megastructure
		}
		if = {
			limit = { has_planet_flag = has_megastructure }
			remove_planet_flag = has_megastructure
		}
	}
	system_event = { id = giga_blokkat.7002 days = 30 }
	every_system_planet = {
		clear_deposits = yes
	}
	every_system_planet = {
		limit = {
			is_star = yes
		}
		change_pc = pc_giga_empty_space
		add_modifier = {
			modifier = blokkat_can_repair_system
			days = -1
		}
	}
	every_system_planet = {
		limit = {
			is_colony = yes
		}
		destroy_colony = yes
	}
	star = {
		planet_event = { id = giga_blokkat.2002 }
	}
	every_system_ambient_object = {
		limit = {
			NOT = { has_ambient_object_flag = blokkat_star_collapse }
		}
		destroy_ambient_object = THIS
	}
	system_event = { id = giga_blokkat.2003 days = 1 }
	every_system_megastructure = {
		limit = {
			NOT = { mega_blokkats_wont_stripmine = yes }
		}
		set_owner = event_target:blokkat_country
	}
	blokkat_increment_system_ships = yes
	every_fleet_in_system = {
		limit = {
			owner = { NOT = { is_country_type = blokkat_stripminers } }
		}
		if = {
			limit = {
				is_ship_size = science
				owner = { NOT = { has_country_flag = blokkat_ship_sacrificed } }
			}
			owner = { country_event = { id = giga_blokkat.1043 } }
		}
		destroy_fleet = THIS
	}
	every_neighbor_system = { remove_hyperlane = { from = prev to = this } }
}

blokkat_increment_system_ships = {
	every_ship_in_system = {
		limit = { owner = { NOT = { is_country_type = blokkat_stripminers } } }
		every_country = {
			limit = { has_event_chain = blokkat_chain }
			add_event_chain_counter = {
				event_chain = blokkat_chain
				counter = ships_lost_to_blokkats
				amount = 1
			}
		}
	}
}

blokkat_harvest_system_mothership = {
	every_system_planet = {
		limit = { 
			is_colony = yes
			owner = { is_ai = no }
		}
		planet_event = { id = giga_blokkat.1023 }
		set_planet_flag = blokkat_dont_delete_yet
	}
	if = {
		limit = {
			OR = {
				any_system_planet = { is_planet_class = pc_infested }
				any_system_planet = { is_planet_class = pc_ai }
			}
		}
		every_system_planet = {
			limit = {
				OR = { 
					has_planet_flag = machine_world_1
					has_planet_flag = machine_world_2
					has_planet_flag = machine_world_3
					has_planet_flag = machine_world_4
				}
			}
			planet_event = { id = giga_qso.111 }
		}
		every_system_planet = {
			limit = { has_planet_flag = machine_lair }
			planet_event = { id = giga_qso.113 }
		}
		every_system_planet = {
			limit = { is_planet_class = pc_infested }
			planet_event = { id = giga_qso.115 } # Infested world
		}
	}
	if = {
		limit = {
			NOT = { has_global_flag = blokkats_ate_first_system }
		}
		set_global_flag = blokkats_ate_first_system
		save_global_event_target_as = blokkat_first_stripmined_system
		every_country = {
			limit = {
				has_event_chain = "blokkat_chain"
			}
			country_event = { id = giga_blokkat.1020 days = 2 }
		}
	}
	every_country = {
		limit = {
			has_event_chain = "blokkat_chain"
		}
		add_event_chain_counter = {
			event_chain = "blokkat_chain"
			counter = "blokkat_systems_stripmined"
			amount = 1
		}
	}
	every_system_planet = {
		limit = {
			is_star = no
		}
		every_country = {
			limit = {
				has_event_chain = "blokkat_chain"
			}
			add_event_chain_counter = {
				event_chain = "blokkat_chain"
				counter = "blokkat_planets_stripmined"
				amount = 1
			}
		}
	}
	set_star_class = sc_blokkat_stripmined
	remove_star_flag = blokkat_system_being_stripmined
	set_star_flag = blokkat_stripmined_system
	if = {
		limit = { NOT = { has_star_flag = blokkat_system_name_set_to_void } }
		set_star_flag = blokkat_system_name_set_to_void
		set_name = {
			key = "NAME_Giga_Vester_Void_System"
			variable_string = "[current_blokkat_mothership_system.GetName]"
		}
	}
	set_asteroid_belt = { radius = 0 }
	random_fleet_in_system = {
		limit = { has_fleet_flag = blokkat_mothership_fleet }
		ROOT = {
			create_ambient_object = {
				type = blokkat_star_collapse
				location = PREV
				entity_offset_height = -5
				effect = {
					set_ambient_object_flag = blokkat_star_collapse
				}
			}
		}
	}
	every_system_planet = {
		if = {
			limit = { has_planet_flag = megastructure }
			remove_planet_flag = megastructure
		}
		if = {
			limit = { has_planet_flag = has_megastructure }
			remove_planet_flag = has_megastructure
		}
	}
	system_event = { id = giga_blokkat.7005 days = 30 }
	every_system_planet = {
		clear_deposits = yes
	}
	every_system_planet = {
		limit = {
			is_star = yes
		}
		change_pc = pc_giga_empty_space
		add_modifier = {
			modifier = blokkat_can_repair_system
			days = -1
		}
	}
	every_system_planet = {
		limit = {
			is_colony = yes
		}
		destroy_colony = yes
	}
	star = {
		planet_event = { id = giga_blokkat.2002 }
	}
	every_system_ambient_object = {
		limit = {
			NOT = { has_ambient_object_flag = blokkat_star_collapse }
		}
		destroy_ambient_object = THIS
	}
	every_system_megastructure = {
		limit = {
			NOT = { mega_blokkats_wont_stripmine = yes }
		}
		set_owner = event_target:blokkat_country
	}
	system_event = { id = giga_blokkat.2003 days = 1 }
	blokkat_increment_system_ships = yes
	every_fleet_in_system = {
		limit = {
			owner = { NOT = { is_country_type = blokkat_stripminers } }
		}
		if = {
			limit = {
				is_ship_size = science
				owner = { NOT = { has_country_flag = blokkat_ship_sacrificed } }
			}
			owner = { country_event = { id = giga_blokkat.1043 } }
		}
		destroy_fleet = THIS
	}
	every_neighbor_system = { remove_hyperlane = { from = prev to = this } }
}

update_blokkat_inquietude_display = {
	set_variable = {
		which = blokkat_inquietude_research_value
		value = 3
	}
	set_variable = {
		which = blokkat_inquietude_stability_value
		value = 1
	}
	set_variable = {
		which = blokkat_inquietude_happiness_value #crime value (used to impact happiness)
		value = 4
	}
	multiply_variable = {
		which = blokkat_inquietude_research_value
		value = blokkat_inquietude_value
	}
	multiply_variable = {
		which = blokkat_inquietude_stability_value
		value = blokkat_inquietude_value
	}
	multiply_variable = {
		which = blokkat_inquietude_happiness_value
		value = blokkat_inquietude_value
	}
}


create_blokkat_admiral = {
	create_leader = {
		class = admiral
		set_age = 46546
		immortal = yes
		gender = indeterminable
		skill = 8
		name = "Temp"
		species = event_target:diverse_blokkat_species
		traits = {
			trait = admiral_trait_blokkat
			trait = leader_trait_admiral_psionic
			trait = leader_trait_admiral_synthetic
		}
	}
	last_created_leader = {
		save_global_event_target_as = new_blokkat_admiral
		set_blokkat_leader_data = yes
	}
}

set_blokkat_leader_data = {
	random_list = {
		1 = { set_name = "Blokkutos" }
		1 = { set_name = "MrBlokkly" }
		1 = { set_name = "Dwane 'The Blokk' Johnson" }
		1 = { set_name = "Blokkoomy" }
		1 = { set_name = "Blokki'tas, the Mineralizer" }
		1 = { set_name = "Blokklim" }
		1 = { set_name = "Blokkivist" }
		1 = { set_name = "Blokkat" }
		1 = { set_name = "Nerukkat" }
		1 = { set_name = "Blokkitae Blokkerian" }
		1 = { set_name = "BlokkGR" }
		1 = { set_name = "Phenkk" }
		1 = { set_name = "Blokkhive" }
		1 = { set_name = "Blokksauna" }
		1 = { set_name = "Blokkleiner" }
		1 = { set_name = "Blokkoth" }
		1 = { set_name = "Blokky Blade" }
		1 = { set_name = "Blokkbei" }
		1 = { set_name = "Blokkiler" }
		1 = { set_name = "Blokholl" }
		1 = { set_name = "Blokkimous" }
		1 = { set_name = "Philokk" }
		1 = { set_name = "Blokkepard" }
		1 = { set_name = "Blokkarat" }
		1 = { set_name = "Diym" }
		1 = { set_name = "Blokkonio" }
		1 = { set_name = "Chabloc" }
		1 = { set_name = "Blokktani" }
		1 = { set_name = "Blokkeff" }
		1 = { set_name = "Blookly" }
		1 = { set_name = "Blokktoneux" }
		1 = { set_name = "Bloklank" }
		1 = { set_name = "Blokkiblokkcherfan" }
		1 = { set_name = "Tiyak" }
		1 = { set_name = "Deiblokk" }
		1 = { set_name = "Blooky" }
		1 = { set_name = "Blokkamity" }
		0 = { set_name = "If you are a Paluush and see this, screw you!" }
		1 = { set_name = "B-Blokkvin" }
		1 = { set_name = "Blokkino" }
		1 = { set_name = "Blokknwn" }
		1 = { set_name = "Blokkian" }
		1 = { set_name = "Henrokkat" }
		1 = { set_name = "Blokketium" }
		1 = { set_name = "Blokkmax" }
		1 = { set_name = "N-Blunkker" }
		1 = { set_name = "Garokk" }
		1 = { set_name = "Blokkaniks" }
		1 = { set_name = "Blokkybara" }
		1 = { set_name = "Hye-Blokk" }
		1 = { set_name = "Blokklise" }
		1 = { set_name = "Blokkaneer" }
		1 = { set_name = "Aeroblokkolfos" }
		1 = { set_name = "Blokkia" }
		1 = { set_name = "Chirublokku" }
		1 = { set_name = "Blokkon" }
		1 = { set_name = "Blokkrupted" }
		1 = { set_name = "Placeholder Blokkat" }
		1 = { set_name = "Blokkimir" }
		1 = { set_name = "Blokkeroni" }
		1 = { set_name = "Blokkaton" }
		1 = { set_name = "Blokki" }
		1 = { set_name = "Dasblok" }
		1 = { set_name = "Bluk" }
		1 = { set_name = "Raymond Jenkins" }
		1 = { set_name = "Blokko" }
		1 = { set_name = "Mineralizer" }
		1 = { set_name = "Babablokky" }
		1 = { set_name = "Blokkerre" }
		1 = { set_name = "Kablokk" }
		1 = { set_name = "Plokk" }
		1 = { set_name = "Klokk" }
		1 = { set_name = "Lokk" }
		1 = { set_name = "Elokk" }
		1 = { set_name = "Blokkiwiny" }
		1 = { set_name = "Derblokken" }
		1 = { set_name = "Zeblokk" }
		1 = { set_name = "Tublokk" }
		4 = {
			set_name = "Blokkmo"
			if = {
				limit = { NOT = { has_leader_flag = blokkmo_leader } }
				set_leader_flag = blokkmo_leader
			}
			set_leader_flag = unique_blokkat_leader
			if = {
				limit = {
					leader_class = admiral
					NOT = { has_trait = leader_trait_admiral_chosen }
				}
				add_trait = leader_trait_admiral_chosen
			}
			modifier = {
				factor = 0
				any_country = { any_owned_leader = { has_leader_flag = blokkmo_leader } }
			}
			modifier = { #Already defined
				add = 10000
				has_leader_flag = blokkmo_leader
			}
		}
		4 = {
			set_name = "Blokkazoi" 
			set_leader_flag = blokkazoi_leader
			set_leader_flag = unique_blokkat_leader
			modifier = {
				factor = 0
				any_country = { any_owned_leader = { has_leader_flag = blokkazoi_leader } }
			}
		}
		#matrx50 (Patreon)
		4 = {
			set_name = "Blokktrx"
			if = {
				limit = { NOT = { has_leader_flag = blokktrx_leader } }
				set_leader_flag = blokktrx_leader
			}
			set_leader_flag = unique_blokkat_leader
			modifier = {
				factor = 0
				any_country = { any_owned_leader = { has_leader_flag = blokktrx_leader } }
			}
			modifier = { #Already defined
				add = 10000
				has_leader_flag = blokktrx_leader
			}
		}
		#Kayto Shields (Patreon)
		4 = {
			set_name = "Blokkshield"
			if = {
				limit = { NOT = { has_leader_flag = blokkshield_leader } }
				set_leader_flag = blokkshield_leader
			}
			set_leader_flag = unique_blokkat_leader
			add_trait = trait_blokkat_speed_freak
			modifier = {
				factor = 0
				any_country = { any_owned_leader = { has_leader_flag = blokkshield_leader } }
			}
			modifier = { #Already defined
				add = 10000
				has_leader_flag = blokkshield_leader
			}
		}
		#Oriana (Patreon)
		4 = {
			set_name = "Blokkiana Blokkima"
			if = {
				limit = { NOT = { has_leader_flag = blokkiana_leader } }
				set_leader_flag = blokkiana_leader
			}
			set_leader_flag = unique_blokkat_leader
			add_trait = trait_blokkat_primitive_enthusiast
			modifier = {
				factor = 0
				any_country = { any_owned_leader = { has_leader_flag = blokkiana_leader } }
			}
			modifier = { #Already defined
				add = 10000
				has_leader_flag = blokkiana_leader
			}
		}
	}
	random_list = {
		1 = { set_age = 43486 set_variable = { which = blokkat_age_value value = 43486 } }
		1 = { set_age = 47275 set_variable = { which = blokkat_age_value value = 47275 } }
		1 = { set_age = 57242 set_variable = { which = blokkat_age_value value = 57242 } }
		1 = { set_age = 24577 set_variable = { which = blokkat_age_value value = 24577 } }
		1 = { set_age = 52422 set_variable = { which = blokkat_age_value value = 52422 } }
		1 = { set_age = 24278 set_variable = { which = blokkat_age_value value = 24278 } }
		1 = { set_age = 57555 set_variable = { which = blokkat_age_value value = 57555 } }
		1 = { set_age = 43486 set_variable = { which = blokkat_age_value value = 43486 } }
		1 = { set_age = 37572 set_variable = { which = blokkat_age_value value = 37572 } }
		1 = { set_age = 58672 set_variable = { which = blokkat_age_value value = 58672 } }
		1 = { set_age = 35257 set_variable = { which = blokkat_age_value value = 35257 } }
	}
}

set_blokkat_admiral_leader_data = {
	set_blokkat_leader_data = yes
	set_name = {
		key = "giga_blokkat_admiral_name"
		variable_string = "[THIS.GetName]"
	}
	random_list = {
		1 = { set_age = 93486 }
		1 = { set_age = 117275 }
		1 = { set_age = 97242 }
		1 = { set_age = 94577 }
		1 = { set_age = 92422 }
		1 = { set_age = 94278 }
		1 = { set_age = 97555 }
		1 = { set_age = 93486 }
		1 = { set_age = 97572 }
		1 = { set_age = 98672 }
		1 = { set_age = 85257 }
	}
}

create_strong_blokkat_admiral = {
	create_leader = {
		class = admiral
		set_age = 46546
		immortal = yes
		gender = indeterminable
		skill = 10
		name = "Temp"
		species = event_target:admiral_blokkat_species
		traits = {
			trait = trait_blokkat_admiral
			trait = admiral_trait_blokkat
			trait = leader_trait_admiral_psionic
			trait = leader_trait_admiral_synthetic
		}
	}
	last_created_leader = {
		save_global_event_target_as = new_blokkat_admiral
		set_blokkat_admiral_leader_data = yes
	}
}

#FLEETS
spawn_blokkat_combat_fleet = {
	event_target:blokkat_country = {
		create_strong_blokkat_admiral = yes
	}
	create_fleet = { #Spawn some Escort ships
		name = "Blokk-Terminator"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = no
			can_change_composition = yes
			is_boss = yes
		}
		effect = {
			set_owner = event_target:blokkat_country
			while = {
				count = 1
				create_ship = {
					name = "Blokk-Terminator"
					design = "Blokk-Terminator"
					prefix = no
					effect = {
						apply_blokkat_difficulty_modifier = yes
						set_disable_at_health = 0.01
						set_variable = {
							which = blokkat_ship_life_count
							value = event_target:blokkat_country.blokkat_terminator_life_count
						}
					}
				}
			}
			set_location = {
				target = event_target:future_blokkat_mothership_system.star
				distance = 0
				angle = random
			}
			set_formation_scale = 25
			set_fleet_flag = blokkat_terminator_fleet
			set_fleet_flag = blokkat_fleet
			assign_leader = event_target:new_blokkat_admiral
			save_global_event_target_as = recently_created_terminator_fleet
		}
	}
}

#Main fleets
spawn_blokkat_mothership_fleet = {
	#Spawn fleets
	create_leader = {
		class = admiral
		set_age = 97458
		immortal = yes
		gender = indeterminable
		skill = 10
		name = "Blokk Behemoth"
		species = event_target:diverse_blokkat_species
		traits = {
			trait = admiral_trait_blokkat
			trait = leader_trait_admiral_psionic
			trait = leader_trait_admiral_synthetic
		}
	}
	create_fleet = { #Spawn the mothership
		name = "Blokkat-Vester"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = no
			can_change_composition = no
			is_boss = yes
			garrison = yes
		}
		effect = {
			set_owner = ROOT
			create_ship = {
				name = "Blokkat-Vester Harvesting Overseer"
				design = "Blokkat-Vester"
				prefix = no
				effect = {
					apply_blokkat_difficulty_modifier_bigship_damage = yes
					set_disable_at_health = 0.05
					save_global_event_target_as = blokkat_mothership_ship
				}
			}
			set_location = {
				target = event_target:future_blokkat_mothership_system.star
				distance = 5
				angle = random
			}
			set_formation_scale = 10
			assign_leader = last_created_leader
			set_fleet_flag = blokkat_mothership_fleet
			set_fleet_flag = blokkat_fleet
			save_global_event_target_as = blokkat_mothership_fleet
		}
	}
	if = {
		limit = {
			OR = {
				has_global_flag = giga_blokkats_bismuth
				has_global_flag = giga_blokkats_endtech
			}
		}
		event_target:blokkat_country = {
			create_strong_blokkat_admiral = yes
		}
		create_fleet = { #Spawn the escort fleet
			name = "Blokk-Vesteskort"
			settings = {
				spawn_debris = no
				can_upgrade = no
				uses_naval_capacity = no
				can_change_composition = no
				is_boss = no
			}
			effect = {
				set_owner = ROOT
				if = {
					limit = { has_global_flag = giga_blokkats_bismuth }
					while = {
						count = 2
						create_ship = {
							name = "Blokk-Terminator"
							design = "Blokk-Terminator"
							prefix = no
							effect = {
								set_disable_at_health = 0.01
								set_variable = {
									which = blokkat_ship_life_count
									value = event_target:blokkat_country.blokkat_terminator_life_count
								}
							}
						}
					}
				}
				if = {
					limit = { has_global_flag = giga_blokkats_endtech }
					while = {
						count = 5
						create_ship = {
							name = "Blokk-Terminator"
							design = "Blokk-Terminator"
							prefix = no
							effect = {
								set_disable_at_health = 0.01
								set_variable = {
									which = blokkat_ship_life_count
									value = event_target:blokkat_country.blokkat_terminator_life_count
								}
							}
						}
					}
					while = {
						count = 50
						create_ship = {
							name = "Blokk-Custodian"
							design = "Blokk-Custodian"
							prefix = no
							effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
						}
					}
					while = {
						count = 250
						create_ship = {
							name = "Blokk-Evictor"
							design = "Blokk-Evictor"
							prefix = no
							effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
						}
					}
				}
				set_location = {
					target = event_target:future_blokkat_mothership_system.star
					distance = 5
					angle = random
				}
				set_formation_scale = 10
				assign_leader = last_created_leader
				set_fleet_flag = blokkat_mothership_escort_fleet
				set_fleet_flag = blokkat_fleet
				save_global_event_target_as = blokkat_mothership_escort_fleet
				clear_fleet_actions = this
				clear_orders = yes
				remove_auto_move_target = yes
				auto_follow_fleet = {
					target = event_target:blokkat_mothership_fleet
					attack_fleet = no
				}
				fleet_event = { id = giga_blokkat.7008 days = 15 }
			}
		}
	}
}

spawn_blokkat_harvesting_fleet = {
	event_target:blokkat_country = {
		create_blokkat_admiral = yes
	}
	create_fleet = { #Spawn some harvesting ships
		name = "Blokk-Dismantler"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = no
			can_change_composition = no
			is_boss = yes
			garrison = yes
		}
		effect = {
			set_owner = ROOT
			create_ship = {
				name = "Blokk-Dismantler"
				design = "Blokk-Harvester"
				prefix = no
				effect = {
					apply_blokkat_difficulty_modifier_bigship_damage = yes
					set_disable_at_health = 0.01
					set_variable = {
						which = blokkat_harvester_life_count
						value = event_target:blokkat_country.blokkat_harvester_life_count
					}
				}
			}
			set_location = {
				target = event_target:future_blokkat_mothership_system.star
				distance = 200
				angle = random
			}
			set_formation_scale = 25
			set_fleet_flag = blokkat_stripmine_fleet
			set_fleet_flag = blokkat_fleet
			assign_leader = event_target:new_blokkat_admiral
		}
	}
}

blokkat_movement_queue = {
	queue_actions = {
		repeat = {
			effect = {
				id = "blokkscoutmovement.1"
				solar_system = {
					#set_star_flag = blokk_scout_arrived
					change_variable = {
						which = times_blokk_scout_arrived
						value = 1
					}
					random_list = {
						0 = {
							set_timed_star_flag = { months = 2 flag = blokk_scout_arrived }
							modifier = { check_variable = { value >= 1 which = times_blokk_scout_arrived } add = 1 }
						}
						0 = {
							set_timed_star_flag = { months = 4 flag = blokk_scout_arrived }
							modifier = { check_variable = { value >= 2 which = times_blokk_scout_arrived } add = 2 }
						}
						0 = {
							set_timed_star_flag = { months = 6 flag = blokk_scout_arrived }
							modifier = { check_variable = { value >= 3 which = times_blokk_scout_arrived } add = 3 }
						}
						0 = {
							set_timed_star_flag = { months = 8 flag = blokk_scout_arrived }
							modifier = { check_variable = { value >= 4 which = times_blokk_scout_arrived } add = 4 }
						}
						0 = {
							set_timed_star_flag = { months = 10 flag = blokk_scout_arrived }
							modifier = { check_variable = { value >= 5 which = times_blokk_scout_arrived } add = 5 }
						}
					}
					# Case 1 - Random unsighted system outside of Mining Fleet
					if = {
						limit = {
							any_system = {
								has_hyperlane_to = prev
								NOR = { 
									has_star_flag = blokk_scout_arrived 
									has_star_flag = blokkat_harvester_en_route
									any_fleet_in_system = {
										is_owned_by = prevprevprev.owner
									}
								}
								NOT = { is_star_class = sc_blokkat_stripmined }
							}
						}
						random_system = {
							limit = {
								has_hyperlane_to = prev
								NOR = { 
									has_star_flag = blokk_scout_arrived 
									has_star_flag = blokkat_harvester_en_route
									any_fleet_in_system = {
										is_owned_by = prevprevprev.owner
									}
								}
								NOT = { is_star_class = sc_blokkat_stripmined }
							}
							set_star_flag = blokk_scout_moving_here@prevprev
						}
					}
					# Case 2 - Random unsighted neighbour system both outside of Mining Flotilla
					else_if = {
						limit = {
							any_system = {
								has_hyperlane_to = prev
								NOR = { 
									has_star_flag = blokk_scout_arrived 
									has_star_flag = blokkat_harvester_en_route
									any_fleet_in_system = {
										is_owned_by = prevprevprev.owner
									}
								}
								any_system = {
									has_hyperlane_to = prev
									NOR = { 
										has_star_flag = blokk_scout_arrived 
										has_star_flag = blokkat_harvester_en_route
										any_fleet_in_system = {
											is_owned_by = prevprevprev.owner
										}
									}
								}
								NOT = { is_star_class = sc_blokkat_stripmined }
							}
						}
						random_system = {
							limit = {
								has_hyperlane_to = prev
								NOR = { 
									has_star_flag = blokk_scout_arrived 
									has_star_flag = blokkat_harvester_en_route
									any_fleet_in_system = {
										is_owned_by = prevprevprev.owner
									}
								}
								any_system = {
									has_hyperlane_to = prev
									NOR = { 
										has_star_flag = blokk_scout_arrived 
										has_star_flag = blokkat_harvester_en_route
										any_fleet_in_system = {
											is_owned_by = prevprevprev.owner
										}
									}
								}
								NOT = { is_star_class = sc_blokkat_stripmined }
							}
							set_star_flag = blokk_scout_moving_here@prevprev
						}
					}
					# Case 3 - Random unsighted neighbour system outside of Mining Flotilla
					else_if = {
						limit = {
							any_system = {
								has_hyperlane_to = prev
								any_system = {
									has_hyperlane_to = prev
									NOR = { 
										has_star_flag = blokk_scout_arrived 
										has_star_flag = blokkat_harvester_en_route
										any_fleet_in_system = {
											is_owned_by = prevprevprev.owner
										}
									}
								}
								NOT = { is_star_class = sc_blokkat_stripmined }
							}
						}
						random_system = {
							limit = {
								has_hyperlane_to = prev
								any_system = {
									has_hyperlane_to = prev
									NOR = { 
										has_star_flag = blokk_scout_arrived 
										has_star_flag = blokkat_harvester_en_route
										any_fleet_in_system = {
											is_owned_by = prevprevprev.owner
										}
									}
								}
								NOT = { is_star_class = sc_blokkat_stripmined }
							}
							set_star_flag = blokk_scout_moving_here@prevprev
						}
					}
					# otherwise just pick a random neighbour
					else = {
						random_system = {
							limit = {
								has_hyperlane_to = prev
								NOT = { is_star_class = sc_blokkat_stripmined }
							}
							set_star_flag = blokk_scout_moving_here@prevprev
						}
					}
				}
			}
			find_random_system = {
				trigger = {
					id = "blokkscoutmovement.1"
					has_star_flag = blokk_scout_moving_here@prev
				}
				found_system = {
					move_to = this
					effect = {
						id = "blokkscoutmovement.1"
						remove_star_flag = blokk_scout_moving_here@prev
					}
					wait = {
						duration = 10
						random = 20
					}
				}
			}
			# effect = {
			# 	id = "blokkscoutmovement.1"
			# 	random_system = {
			# 		limit = {
			# 			has_star_flag = blokk_scout_moving_here@prev
			# 		}
			# 		remove_star_flag = blokk_scout_moving_here@prev
			# 	}
			# }
		}
	}
}

spawn_blokkat_scout_fleet = {
	if = {
		limit = { NOT = { has_global_flag = giga_blokkats_endtech } }
		event_target:blokkat_country = {
			create_blokkat_admiral = yes
		}
		create_fleet = { #Spawn some Escort ships
			name = "Blokk-Skout"
			settings = {
				spawn_debris = no
				can_upgrade = no
				uses_naval_capacity = no
				can_change_composition = no
				is_boss = no
			}
			effect = {
				set_owner = ROOT
				while = {
					count = 1
					create_ship = {
						name = "Blokk-Custodian"
						design = "Blokk-Custodian"
						prefix = no
						effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
					}
				}
				while = {
					count = 10
					create_ship = {
						name = "Blokk-Evictor"
						design = "Blokk-Evictor"
						prefix = no
						effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
					}
				}
				if = {
					limit = { has_global_flag = giga_blokkats_bismuth }
					while = {
						count = 2
						create_ship = {
							name = "Blokk-Custodian"
							design = "Blokk-Custodian"
							prefix = no
							effect = { apply_blokkat_difficulty_modifier = yes }
						}
					}
					while = {
						count = 20
						create_ship = {
							name = "Blokk-Evictor"
							design = "Blokk-Evictor"
							prefix = no
							effect = { apply_blokkat_difficulty_modifier = yes }
						}
					}
				}
				set_location = {
					target = event_target:blokkat_scout_fleet_location.star
					distance = 400
					angle = random
				}
				set_formation_scale = 3
				set_fleet_flag = blokkat_scout_fleet
				set_fleet_flag = blokkat_fleet
				assign_leader = event_target:new_blokkat_admiral

				blokkat_movement_queue = yes
			}
		}
	}
	else = {
		event_target:blokkat_country = {
			create_strong_blokkat_admiral = yes
		}
		create_fleet = { #Spawn some Escort ships
			name = "Blokk-Terminator"
			settings = {
				spawn_debris = no
				can_upgrade = no
				uses_naval_capacity = no
				can_change_composition = yes
				is_boss = yes
			}
			effect = {
				set_owner = event_target:blokkat_country
				while = {
					count = 1
					create_ship = {
						name = "Blokk-Terminator"
						design = "Blokk-Terminator"
						prefix = no
						effect = {
							set_disable_at_health = 0.01
							set_variable = {
								which = blokkat_ship_life_count
								value = event_target:blokkat_country.blokkat_terminator_life_count
							}
							if = {
								limit = { has_global_flag = giga_blokkats_endtech }
								add_modifier = { modifier = blokkat_bismuth_ship_damage_buff days = -1 }
							}
						}
					}
				}
				set_location = {
					target = event_target:blokkat_scout_fleet_location.star
					distance = 400
					angle = random
				}
				set_formation_scale = 25
				set_fleet_flag = blokkat_scout_fleet
				set_fleet_flag = blokkat_terminator_fleet
				set_fleet_flag = blokkat_fleet
				assign_leader = event_target:new_blokkat_admiral

				blokkat_movement_queue = yes
			}
		}
	}
}

spawn_blokkat_escort_fleet = {
	event_target:blokkat_country = {
		if = {
			limit = { NOT = { has_global_flag = giga_blokkats_endtech } }
			create_blokkat_admiral = yes
		}
		else = { create_strong_blokkat_admiral = yes }
	}
	create_fleet = { #Spawn some Escort ships
		name = "Blokk-Eskort"
		settings = {
			spawn_debris = no
			can_upgrade = no
			uses_naval_capacity = no
			can_change_composition = no
			is_boss = no
			garrison = yes
		}
		effect = {
			set_owner = ROOT
			while = {
				count = 5
				create_ship = {
					name = "Blokk-Custodian"
					design = "Blokk-Custodian"
					prefix = no
					effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
				}
			}
			while = {
				count = 25
				create_ship = {
					name = "Blokk-Evictor"
					design = "Blokk-Evictor"
					prefix = no
					effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
				}
			}
			if = {
				limit = { has_global_flag = giga_blokkats_bismuth }
				while = {
					count = 10
					create_ship = {
						name = "Blokk-Custodian"
						design = "Blokk-Custodian"
						prefix = no
						effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
					}
				}
				while = {
					count = 50
					create_ship = {
						name = "Blokk-Evictor"
						design = "Blokk-Evictor"
						prefix = no
						effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
					}
				}
			}
			if = {
				limit = { has_global_flag = giga_blokkats_endtech }
				while = {
					count = 2
					create_ship = {
						name = "Blokk-Terminator"
						design = "Blokk-Terminator"
						prefix = no
						effect = {
							set_disable_at_health = 0.01
							set_variable = {
								which = blokkat_ship_life_count
								value = event_target:blokkat_country.blokkat_terminator_life_count
							}
						}
					}
				}
				while = {
					count = 25
					create_ship = {
						name = "Blokk-Custodian"
						design = "Blokk-Custodian"
						prefix = no
						effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
					}
				}
				while = {
					count = 125
					create_ship = {
						name = "Blokk-Evictor"
						design = "Blokk-Evictor"
						prefix = no
						effect = { apply_blokkat_difficulty_modifier = yes apply_blokkat_difficulty_modifier_damage = yes }
					}
				}
			}
			set_location = {
				target = event_target:future_blokkat_mothership_system.star
				distance = 400
				angle = random
			}
			if = {
				limit = { has_global_flag = giga_blokkats_endtech }
				set_formation_scale = 7
			}
			else = {
				set_formation_scale = 3
			}
			set_fleet_flag = blokkat_escort_fleet
			set_fleet_flag = blokkat_fleet
			assign_leader = event_target:new_blokkat_admiral
		}
	}
}

#Difficulty
apply_blokkat_difficulty_modifier_bigship_damage = {
	if = {
		limit = { has_global_flag = giga_blokkats_endtech }
		add_modifier = { modifier = blokkat_endtech_ship_damage_buff_bigship days = -1 }
	}
	if = {
		limit = { has_global_flag = giga_blokkats_bismuth }
		add_modifier = { modifier = blokkat_bismuth_ship_damage_buff days = -1 }
	}
}

apply_blokkat_difficulty_modifier = {
	if = {
		limit = { has_global_flag = giga_blokkats_endtech }
		add_modifier = { modifier = blokkat_endtech_ship_buff days = -1 }
	}
	if = {
		limit = { has_global_flag = giga_blokkats_bismuth }
		add_modifier = { modifier = blokkat_bismuth_ship_buff days = -1 }
	}
}

apply_blokkat_difficulty_modifier_damage = {
	if = {
		limit = { has_global_flag = giga_blokkats_endtech }
		add_modifier = { modifier = blokkat_endtech_ship_damage_buff days = -1 }
	}
	if = {
		limit = { has_global_flag = giga_blokkats_bismuth }
		add_modifier = { modifier = blokkat_bismuth_ship_damage_buff days = -1 }
	}
}

remove_flags_blokkat_difficulty = {
	if = {
		limit = { has_global_flag = giga_blokkats_easy }
		remove_global_flag = giga_blokkats_easy
	}
	if = {
		limit = { has_global_flag = giga_blokkats_normal }
		remove_global_flag = giga_blokkats_normal
	}
	if = {
		limit = { has_global_flag = giga_blokkats_bismuth }
		remove_global_flag = giga_blokkats_bismuth
	}
	if = {
		limit = { has_global_flag = giga_blokkats_endtech }
		remove_global_flag = giga_blokkats_endtech
	}
}

reduce_blokkat_spawn_date = {
	if = {
		limit = {
			event_target:global_event_country = {
				check_variable = {
					which = blokkat_spawn_date
					value > 2200
				}
			}
		}
		event_target:global_event_country = {
			subtract_variable = {
				which = blokkat_spawn_date
				value = 50
			}
		}
	}
	else_if = {
		limit = {
			event_target:global_event_country = {
				check_variable = {
					which = blokkat_spawn_date
					value <= 2200
				}
			}
		}
		event_target:global_event_country = {
			set_variable = {
				which = blokkat_spawn_date
				value = 2550
			}
		}
	}
}

begin_blokkat_spawn_cycle = {
	if = {
		limit = { has_global_flag = giga_blokkats_guaranteed }
		set_global_flag = blokkats_managed_to_spawn
		country_event = { id = giga_blokkat.1000 days = 40 random = 30 }
	}
	if = {
		limit = { NOT = { has_global_flag = giga_blokkats_guaranteed } }
		set_global_flag = blokkat_trying_to_spawn
		set_variable = {
			which = blokkat_trying_to_spawn_count
			value = 0
		}
	}
}